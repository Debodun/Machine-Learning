{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOo/+Zw/+9D3sAEFN075aUK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Debodun/Machine-Learning/blob/main/Supervised%20learning/fall%20prediction%20using%20knn\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "nIixoSIUkyov"
      },
      "outputs": [],
      "source": [
        "import sklearn\n",
        "from sklearn.utils import shuffle\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn import linear_model, preprocessing\n",
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "     "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "94YTN3tpnPo3",
        "outputId": "9259524e-c713-432b-877d-d033a190c16b"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-0cdad29f-7918-4558-8288-211f39aadfc9\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-0cdad29f-7918-4558-8288-211f39aadfc9\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving knn_data_sample.csv to knn_data_sample.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv(\"knn_data_sample.csv\")\n",
        "data\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "oHF6scx5lrkY",
        "outputId": "fdff7ff6-bd57-4da3-aad2-adf62078cde0"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  x1  y1  z1  x2  y2  z2 FallOrNot\n",
              "0         NaN   1   2   3   2   1   3         -\n",
              "1         NaN   2   1   3   3   1   2         -\n",
              "2         NaN   1   1   2   3   2   2         -\n",
              "3         NaN   2   2   3   3   2   1         -\n",
              "4         NaN   6   5   7   5   6   7         +\n",
              "5         NaN   5   6   6   6   5   7         +\n",
              "6         NaN   5   6   7   5   7   6         +\n",
              "7         NaN   7   6   7   6   5   6         +"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3fa6302d-1cbe-4e72-9510-8e7e93496318\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>x1</th>\n",
              "      <th>y1</th>\n",
              "      <th>z1</th>\n",
              "      <th>x2</th>\n",
              "      <th>y2</th>\n",
              "      <th>z2</th>\n",
              "      <th>FallOrNot</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>+</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>+</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>+</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>NaN</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>+</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3fa6302d-1cbe-4e72-9510-8e7e93496318')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3fa6302d-1cbe-4e72-9510-8e7e93496318 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3fa6302d-1cbe-4e72-9510-8e7e93496318');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.drop([\"Unnamed: 0\"], axis = 1, inplace= True)"
      ],
      "metadata": {
        "id": "VvUNLKpLpVQH"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "2IMY42oZqvbT",
        "outputId": "506da3f1-feef-4772-ecf5-f1fd433362a2"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   x1  y1  z1  x2  y2  z2 FallOrNot\n",
              "0   1   2   3   2   1   3         -\n",
              "1   2   1   3   3   1   2         -\n",
              "2   1   1   2   3   2   2         -\n",
              "3   2   2   3   3   2   1         -\n",
              "4   6   5   7   5   6   7         +\n",
              "5   5   6   6   6   5   7         +\n",
              "6   5   6   7   5   7   6         +\n",
              "7   7   6   7   6   5   6         +"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-65aca23e-ada9-4857-8b93-3eebc343c825\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x1</th>\n",
              "      <th>y1</th>\n",
              "      <th>z1</th>\n",
              "      <th>x2</th>\n",
              "      <th>y2</th>\n",
              "      <th>z2</th>\n",
              "      <th>FallOrNot</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>+</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>+</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>+</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>+</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65aca23e-ada9-4857-8b93-3eebc343c825')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-65aca23e-ada9-4857-8b93-3eebc343c825 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-65aca23e-ada9-4857-8b93-3eebc343c825');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x1 = list(data[\"x1\"])\n",
        "y1 = list(data[\"y1\"])\n",
        "z1 = list(data[\"z1\"])\n",
        "x2 = list(data[\"x2\"])\n",
        "y2 = list(data[\"y2\"])\n",
        "z2 = list(data[\"z2\"])\n",
        "fallOrNot = list(data[\"FallOrNot\"])"
      ],
      "metadata": {
        "id": "akqn7uXFoV1R"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = list(zip(x1, y1,z1, x2, y2, z2))\n",
        "Y = list(fallOrNot)\n",
        "     "
      ],
      "metadata": {
        "id": "SclhVUg2rnzQ"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X,Y, test_size=0.1)\n",
        "     "
      ],
      "metadata": {
        "id": "A2iUgDrfrsLM"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = KNeighborsClassifier(n_neighbors=3)"
      ],
      "metadata": {
        "id": "ciKZyWMJrwJX"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(x_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ilc8MVg7r1M0",
        "outputId": "efcee815-3eda-4373-830c-bf84d9b37069"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=3)"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.score(x_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V46SD9qusAXI",
        "outputId": "1ee8a6aa-26df-4a0f-b28f-03e225f2a99c"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(model.predict([(7, 6, 5, 5, 6, 7)]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RbqMeQXLsE1V",
        "outputId": "8329e3e3-13a0-4768-a71a-cdb87db4e253"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['+']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# allow plots to appear within the notebook\n",
        "%matplotlib inline\n",
        "\n",
        "scores = []\n",
        "\n",
        "# We use a loop through the range 1 to 26\n",
        "# We append the scores in the dictionary\n",
        "for k in x_train:\n",
        "    y_pred = model.predict(x_test)\n",
        "    scores.append(metrics.accuracy_score(y_test, y_pred))\n",
        "\n",
        "print(scores)\n",
        "\n",
        "# plot the relationship between K and testing accuracy\n",
        "# plt.plot(x_axis, y_axis)\n",
        "plt.plot(x_train, scores)\n",
        "plt.xlabel('Value of K for KNN')\n",
        "plt.ylabel('Testing Accuracy')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        },
        "id": "MPJcXLRisKeh",
        "outputId": "65cce283-9150-4cf0-ea29-589c7488dbdd"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Testing Accuracy')"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}